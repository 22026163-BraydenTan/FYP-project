name: CI/CD Pipeline

on:
  workflow_dispatch:  # Allows manual trigger of the workflow
  push:
    branches:
      - main         # Triggers on push to the main branch
  pull_request:
    branches:
      - main         # Triggers on pull requests targeting the main branch

jobs:
  # Build Job: Sets up the environment and builds the project
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.5  # Check out the repository

      - name: Set up JDK 11
        uses: actions/setup-java@v2    # Set up Java Development Kit version 11
        with:
          java-version: '11'
          distribution: 'adopt'        # Specify the JDK distribution

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.2  # Set up Node.js environment
        with:
          node-version: '12'             # Specify Node.js version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Set up Docker Buildx for multi-platform builds

      - name: Login to Docker Hub
        uses: docker/login-action@v2     # Log in to Docker Hub
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: ./.github/template/docker/  # Build and push Docker image to Docker Hub
        with:
          context: .                       # The context path for the Docker build
          push: true                       # Push the image after building
          tags: ${{ secrets.DOCKER_REPOSITORY }}:latest  # Tag the image

  # Test Job: Runs tests on the application
  test:
    runs-on: ubuntu-latest
    needs: build  # Dependent on the build job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Check out the repository

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.2  # Set up Node.js environment
        with:
          node-version: '12'             # Specify Node.js version

      - name: Install dependencies
        run: npm install  # Install Node.js dependencies

      - name: Run tests on HTML files
        run: npx htmlhint src  # Run HTMLHint to validate HTML files

      - name: Run Cucumber tests
        run: npm run test:cucumber  # Run Cucumber tests

      - name: Upload test results to Xray
        run: node upload-results.js  # Upload test results to Xray for JIRA integration
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

  # Scan Job: Scans the code for vulnerabilities and quality issues
  scan:
    runs-on: ubuntu-latest
    needs: [build, test]  # Dependent on both build and test jobs
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Check out the repository

      - name: SonarCloud Scan
        uses: ./.github/template/sonarcloud/  # Run SonarCloud scan for code quality and security analysis
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Scan HTML file for vulnerabilities
        run: npx retire --path src/test.html --outputformat json  # Use retire.js to scan for security issues in HTML files

  # Deploy Job: Deploys the application
  deploy:
    needs: [build, test, scan]  # Dependent on build, test, and scan jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.5  # Check out the repository

      - name: Setup kubectl
        uses: azure/setup-kubectl@v1  # Set up kubectl for Kubernetes deployment
        with:
          version: v1.18.15

      - name: Docker Deploy
        uses: ./.github/template/docker/  # Custom Docker deployment script
        with:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

      - name: Post to Slack (optional)
        if: success()  # Send a Slack notification if the deployment is successful
        uses: rtCamp/action-slack-notify@v2
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: "New Docker image has been pushed to Docker Hub"
